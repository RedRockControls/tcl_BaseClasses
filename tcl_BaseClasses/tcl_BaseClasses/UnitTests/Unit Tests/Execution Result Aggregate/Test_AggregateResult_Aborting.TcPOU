<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.15">
  <POU Name="Test_AggregateResult_Aborting" Id="{57950dca-2a97-4841-8822-09146e55f9fa}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK Test_AggregateResult_Aborting EXTENDS T_UnitTestBase
VAR
    ResultAggregate : T_ResultAggregate;
    Execution1      : T_Execution;
    Execution2      : T_Execution;
    Execution3      : T_Execution;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Method Name="RunTest" Id="{3000fcde-2c85-46dc-88e3-83e892ccbd82}">
      <Declaration><![CDATA[{attribute 'analysis' := '-33'} // inhibit unused variable warning
METHOD RunTest
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF Retest THEN
    SUPER^.Init();
END_IF

IF TestCompleted THEN
    RETURN;
END_IF

F_Inc(CycleCount);
IF CycleCount > 1000 THEN
    Fail(Message := 'Timeout');
END_IF

ResultAggregate.Clear();

ResultAggregate.AddResult(Execution1);
ResultAggregate.AddResult(Execution2);
ResultAggregate.AddResult(Execution3);

AssertIsTrue(Condition := ResultAggregate.Aborting = FALSE,
             Message   := 'ResultAggregate.Aborting is not false');

Execution3.Start();
Execution3.SetBusy();
Execution3.Abort();

AssertIsTrue(Condition := ResultAggregate.Aborting = TRUE,
             Message   := 'ResultAggregate.Aborting is false');

TestCompleted := TRUE;
]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>
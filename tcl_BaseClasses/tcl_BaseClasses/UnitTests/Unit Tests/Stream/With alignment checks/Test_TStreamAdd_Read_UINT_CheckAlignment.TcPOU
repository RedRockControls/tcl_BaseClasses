<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.15">
  <POU Name="Test_TStreamAdd_Read_UINT_CheckAlignment" Id="{c53a8237-c16e-4f40-9e6e-9a604c43a485}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK Test_TStreamAdd_Read_UINT_CheckAlignment EXTENDS T_UnitTestBase
VAR
    Stream  : T_Stream(StreamLength := 2);
    ArgType : E_ArgTypeId := E_ArgTypeId.Type_UINT;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Method Name="RunTest" Id="{7da4d78f-676e-469b-a5a0-e995500b44e3}">
      <Declaration><![CDATA[{attribute 'analysis' := '-33'} // inhibit unused variable warning
METHOD RunTest
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF Retest THEN
    SUPER^.Init();
END_IF

IF TestCompleted THEN
    RETURN;
END_IF

F_Inc(CycleCount);
IF CycleCount > 1000 THEN
    Fail(Message := 'Timeout');
END_IF

Stream.Init(2);

Stream.Add_BYTE(123);// add a byte to test alignment checks...
Stream.Add_UINT(4567);

Stream.SetReadPosition(0);

Stream.Read_BYTE();

// check next value...	
AssertEquals_UINT(Expected     := 4567,
                            Actual       := Stream.Read_UINT(),
                            Message := 'Stream.Read_UINT()');

// check we are at the end of the stream..							
AssertEquals_UDINT(Expected     := Stream.StreamLength,
                             Actual       := Stream.ReadPosition,
                             Message := 'Stream.ReadPosition');

TestCompleted := TRUE;
]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>
<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="Test_MultipleNotificationsWithStringArgs" Id="{498ab529-1915-457a-a89d-d6efea9df911}" SpecialFunc="None">
    <Declaration><![CDATA[{attribute 'hide'}
FUNCTION_BLOCK Test_MultipleNotificationsWithStringArgs EXTENDS T_UnitTestBase
VAR
    Notification        : T_Notification;
    NotificationHandler : T_NotificationHandler;

    IsRaised          : BOOL;
    NotificationCount : DINT;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Method Name="Init" Id="{08cc2829-cce6-4ded-90f1-dd3c483231c6}">
      <Declaration><![CDATA[METHOD  Init
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[]]></ST>
      </Implementation>
    </Method>
    <Method Name="RunTest" Id="{31f34b70-06bc-4dfb-bb6b-2d182b20f751}">
      <Declaration><![CDATA[{attribute 'analysis' := '-33'} // inhibit unused variable warning
METHOD RunTest
]]></Declaration>
      <Implementation>
        <ST><![CDATA[NotificationHandler.FB_init(bInitRetains := FALSE,
                            bInCopyCode  := FALSE);

NotificationHandler.NotificationQueueingEnabled := TRUE; // Notification Queuing requires care to ensure all notifications are handled, so disabled by default!

IsRaised          := FALSE;
NotificationCount := 0;

Notification.ClearNotificationHandlers().AddNotificationHandler(NotificationHandler);
Notification.Args.Init(8);

Notification.Args.Clear()
    .Add_INT(1234).Add_STRING('String1');

Notification.Raise();

Notification.Args.Clear()
    .Add_INT(5678).Add_STRING('String2');

Notification.Raise();

AssertEquals_DINT(Expected := 2,
                  Actual   := NotificationHandler.NotificationCount,
                  Message  := 'Handler.NotificationCount is not 2');

AssertIsTrue(Condition := NotificationHandler.IsRaised(),
             Message   := 'NotificationHandler.IsRaised() returns false');

AssertEquals_DINT(Expected := 1,
                  Actual   := NotificationHandler.NotificationCount,
                  Message  := 'Handler.NotificationCount is not 1');

AssertEquals_DINT(Expected := 1234,
                  Actual   := NotificationHandler.Args.Read_INT(),
                  Message  := 'Handler.Args.Read_INT() is not 1234');

AssertEquals_STRING(Expected := 'String1',
                      Actual   := NotificationHandler.Args.Read_STRING(),
                      Message  := 'Handler.Args.Read_STRING() returns incorrect value');

AssertIsTrue(Condition := NotificationHandler.IsRaised(),
             Message   := 'Handler.IsRaised() returns false');

AssertEquals_DINT(Expected := 0,
                  Actual   := NotificationHandler.NotificationCount,
                  Message  := 'Handler.NotificationCount is not 0');

AssertEquals_DINT(Expected := 5678,
                  Actual   := NotificationHandler.Args.Read_INT(),
                  Message  := 'Handler.Args.Read_INT() does not return 5678');

AssertEquals_STRING(Expected := 'String2',
                      Actual   := NotificationHandler.Args.Read_STRING(),
                      Message  := 'Handler.Args.Read_STRING() does not return String2');

AssertIsTrue(Condition := NotificationHandler.IsRaised() = FALSE,
             Message   := 'Handler.IsRaised() return true');

TestCompleted := TRUE;
]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>
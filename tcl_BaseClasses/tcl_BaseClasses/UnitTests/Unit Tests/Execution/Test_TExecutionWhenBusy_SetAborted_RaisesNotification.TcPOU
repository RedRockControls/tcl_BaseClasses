<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.9">
  <POU Name="Test_TExecutionWhenBusy_SetAborted_RaisesNotification" Id="{e6104e49-f5bd-4b36-9911-7488f9f89c3f}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK Test_TExecutionWhenBusy_SetAborted_RaisesNotification EXTENDS T_UnitTestbase
VAR
    Execution                            : T_Execution;
    ExecutionFailed_NotificationHandler  : T_NotificationHandler;
    ExecutionAborted_NotificationHandler : T_NotificationHandler;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[// Setup...
Execution.FB_init(bInitRetains := FALSE,
                  bInCopyCode  := FALSE);

ExecutionFailed_NotificationHandler.FB_init(bInitRetains := FALSE,
                                            bInCopyCode  := FALSE);

ExecutionAborted_NotificationHandler.FB_init(bInitRetains := FALSE,
                                             bInCopyCode  := FALSE);

// link handler to common execution events...
GlobalNotifications.Notification_ExecutionFailed
    .ClearNotificationHandlers()
    .AddNotificationHandler(ExecutionFailed_NotificationHandler);

GlobalNotifications.Notification_ExecutionAborted
    .ClearNotificationHandlers()
    .AddNotificationHandler(ExecutionAborted_NotificationHandler);

// Test...
Execution.Start();
Execution.SetBusy();
Execution.SetAborted(); // raises error event

Assertion.AssertEquals_BOOL(Expected     := TRUE,
                            Actual       := ExecutionAborted_NotificationHandler.IsRaised(),
                            VariableName := 'ExecutionAborted_NotificationHandler.IsRaised()');

TestFinished();
]]></ST>
    </Implementation>
  </POU>
</TcPlcObject>
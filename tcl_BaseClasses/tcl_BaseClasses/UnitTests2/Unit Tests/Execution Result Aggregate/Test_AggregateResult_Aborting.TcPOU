<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="Test_AggregateResult_Aborting" Id="{57950dca-2a97-4841-8822-09146e55f9fa}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK Test_AggregateResult_Aborting EXTENDS T_UnitTestBase
VAR
    ResultAggregate : T_ResultAggregate;
    Execution1      : T_Execution;
    Execution2      : T_Execution;
    Execution3      : T_Execution;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Method Name="Init" Id="{65ebb4d1-e08a-4f29-b0c0-9dbd63972a71}">
      <Declaration><![CDATA[METHOD Init
]]></Declaration>
      <Implementation>
        <ST><![CDATA[Execution1.FB_init(FALSE,FALSE);
Execution2.FB_init(FALSE,FALSE);
Execution3.FB_init(FALSE,FALSE);

]]></ST>
      </Implementation>
    </Method>
    <Method Name="RunTest" Id="{3000fcde-2c85-46dc-88e3-83e892ccbd82}">
      <Declaration><![CDATA[{attribute 'analysis' := '-33'} // inhibit unused variable warning
METHOD RunTest
VAR_OUTPUT
    TestCompleted : BOOL;
    TestFailed    : BOOL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[ResultAggregate.ClearResults();

ResultAggregate.AddResult(Execution1);
ResultAggregate.AddResult(Execution2);
ResultAggregate.AddResult(Execution3);

TestFailed S= NOT AssertFalse(Source    := TestName,
                              Condition := ResultAggregate.Aborting,
                              Message   := 'ResultAggregate.Aborting is not false',
                              Failed    =>);

Execution3.Start();
Execution3.SetBusy();
Execution3.Abort();

TestFailed S= NOT AssertTrue(Source    := TestName,
                             Condition := ResultAggregate.Aborting,
                             Message   := 'ResultAggregate.Aborting is false',
                             Failed    =>);

TestCompleted := TRUE;
]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>
<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="Test_TExecutionWhenBusy_Start_RaisesNotification" Id="{084b24e3-9990-483f-9341-dda52872d69c}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK Test_TExecutionWhenBusy_Start_RaisesNotification EXTENDS T_UnitTestbase
VAR
    Execution                            : T_Execution;
    ExecutionFailed_NotificationHandler  : T_NotificationHandler;
    ExecutionAborted_NotificationHandler : T_NotificationHandler;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Method Name="Init" Id="{7b223d44-04c2-4411-99e7-7c0f85109818}">
      <Declaration><![CDATA[METHOD Init
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// Setup...
Execution.FB_init(bInitRetains := FALSE,
                  bInCopyCode  := FALSE);

ExecutionFailed_NotificationHandler.FB_init(bInitRetains := FALSE,
                                            bInCopyCode  := FALSE);

ExecutionAborted_NotificationHandler.FB_init(bInitRetains := FALSE,
                                             bInCopyCode  := FALSE);

]]></ST>
      </Implementation>
    </Method>
    <Method Name="RunTest" Id="{0f92d60d-0ca0-44d2-8941-f0b332232631}">
      <Declaration><![CDATA[{attribute 'analysis' := '-33'} // inhibit unused variable warning
METHOD RunTest
VAR_OUTPUT
    TestCompleted : BOOL;
    TestFailed    : BOOL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// link handler to common execution events...
GlobalNotifications.Notification_ExecutionFailed
    .ClearNotificationHandlers()
    .AddNotificationHandler(ExecutionFailed_NotificationHandler);

GlobalNotifications.Notification_ExecutionAborted
    .ClearNotificationHandlers()
    .AddNotificationHandler(ExecutionAborted_NotificationHandler);

// Test...
Execution.Start(); // sets Starting

Execution.Start(); // raises error event

TestFailed S= NOT AssertTrue(Source    := TestName,
                             Condition := ExecutionFailed_NotificationHandler.IsRaised(),
                             Message   := 'ExecutionFailed_NotificationHandler.IsRaised() not true');

TestCompleted := TRUE;]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>
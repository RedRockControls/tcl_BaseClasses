<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.4">
  <POU Name="TTestEvent_UsesEventArgs" Id="{cc964b97-d91e-4b3b-843f-8611771dcf18}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK TTestEvent_UsesEventArgs EXTENDS TEventBase 
VAR
    Handler : ITestEventHandler_UsesEventArgs;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Method Name="CallHandler" Id="{52b21d31-0a37-403e-8b6e-a1ebc59a09fa}">
      <Declaration><![CDATA[METHOD PRIVATE CallHandler
VAR_INPUT
    HandlerBase : IEventHandlerBase;
    EventArgs   : IStreamReader;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF __QUERYINTERFACE(HandlerBase,Handler) THEN
    Handler.OnThisEvent(EventArgs);
//ELSE
//    tcl_BaseClasses.F_LogError('Event Handling',F_FormatStringEx1('Error raising %s - invalid handler',EventName));
END_IF
]]></ST>
      </Implementation>
    </Method>
    <Method Name="IsHandlerSupported" Id="{1735ba91-2af3-450d-b628-90b070b3965e}">
      <Declaration><![CDATA[METHOD IsHandlerSupported : BOOL
VAR_INPUT
    HandlerBase : IEventHandlerBase;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF __QUERYINTERFACE(HandlerBase,Handler) THEN
    IsHandlerSupported := TRUE;
END_IF

]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>
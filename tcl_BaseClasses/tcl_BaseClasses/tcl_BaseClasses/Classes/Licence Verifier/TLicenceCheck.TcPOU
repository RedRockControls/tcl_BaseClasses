<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.3">
  <POU Name="TLicenceCheck" Id="{40e1d64f-e659-428e-993d-11a56e2e7e65}" SpecialFunc="None">
    <Declaration><![CDATA[{attribute 'hide'}
FUNCTION_BLOCK TLicenceCheck
VAR
    LicenceIdAsString : STRING(38);
    LicenceName : T_MaxString;
    StopTwinCAT_IfNotValid : BOOL;

    FB_GetLicenses1 : FB_GetLicenses;
    F_TRIG_Busy : F_TRIG;
    ScanCount : UDINT;
    TON_CheckComplete : TON;
    //OnTimer_CheckComplete : TOnTimer(PresetTime := 0.1);
    StopTwinCAT : TC_Stop;
    LicenceId : GUID;
    i : UDINT;
    
    _IsValid : BOOL;
    _CheckComplete : BOOL;
    _StopTwinCAT : BOOL;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[IF _IsValid THEN
    RETURN;
END_IF

ScanCount := ScanCount + 1;

FB_GetLicenses1(
	bExecute:= TRUE, 
	tTimeout:= , 
	sNetId:= , 
	bBusy=> , 
	bError=> , 
	nErrorId=> , 
	nValidLicenses=> , 
	aValidLicenses=> , 
	nInvalidLicenses=> , 
	aInvalidLicenses=> );

F_TRIG_Busy(CLK := FB_GetLicenses1.bBusy);
IF F_TRIG_Busy.Q THEN
    _CheckComplete := TRUE;
    IF FB_GetLicenses1.bError THEN
            F_LogError('Licence Check',F_FormatString1('Error %X retrieving TwinCAT licences',F_UDINT(FB_GetLicenses1.nErrorId)));
    ELSE
        IF FB_GetLicenses1.nValidLicenses > 0 THEN
            LicenceId := REGSTRING_TO_GUID(LicenceIdAsString);
            FOR i := 1 TO FB_GetLicenses1.nValidLicenses DO
                IF GuidsEqualByVal(FB_GetLicenses1.aValidLicenses[i].stLicenseId, LicenceId) THEN
                    _IsValid := TRUE;
                END_IF
            END_FOR
        END_IF	
    END_IF
    IF NOT _IsValid THEN
        IF StopTwinCAT_IfNotValid THEN
            F_LogError('Licence Check',F_FormatStringEx2('Licence "%s" with ID %s not found: TwinCAT will be stopped!',LicenceName,LicenceIdAsString));
            ScanCount := 0;
            TON_CheckComplete(IN := TRUE, PT := T#100MS);
            _StopTwinCAT := TRUE;
        ELSE
            F_LogError('Licence Check',F_FormatStringEx2('Licence "%s" with ID %s not found.',LicenceName,LicenceIdAsString));
		END_IF
    END_IF
END_IF

TON_CheckComplete();

IF _StopTwinCAT THEN
    IF ScanCount > 5 OR TON_CheckComplete.Q THEN // scan count used when cyclically executed, timer used where executed sporadically
        StopTwinCAT(
            NETID:= , 
            STOP:= TRUE, 
            TMOUT:= , 
            BUSY=> , 
            ERR=> , 
            ERRID=> );
	END_IF
END_IF

]]></ST>
    </Implementation>
    <Property Name="CheckComplete" Id="{da776824-ed67-0ff5-06a5-aab06d75425b}">
      <Declaration><![CDATA[PROPERTY CheckComplete : BOOL]]></Declaration>
      <Get Name="Get" Id="{c08f7850-8bc3-05f8-125e-dd70704fee42}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[CheckComplete := _CheckComplete;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="FB_init" Id="{856d94e4-3d1c-0f26-1109-75c39d713bd2}">
      <Declaration><![CDATA[METHOD FB_init : BOOL
VAR_INPUT
	bInitRetains : BOOL; // if TRUE, the retain variables are initialized (warm start / cold start)
	bInCopyCode : BOOL;  // if TRUE, the instance afterwards gets moved into the copy code (online change)
    LicenceIdAsString : STRING(38);
    LicenceName : T_MaxString;
    StopTwinCAT_IfNotValid : BOOL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[THIS^.LicenceIdAsString         := LicenceIdAsString;
THIS^.LicenceName               := LicenceName;
THIS^.StopTwinCAT_IfNotValid    := StopTwinCAT_IfNotValid;
THIS^._IsValid                  := FALSE;
THIS^._CheckComplete            := FALSE;

]]></ST>
      </Implementation>
    </Method>
    <Property Name="IsValid" Id="{b6f7e1aa-c5c1-406a-a9a4-f016f656f11a}">
      <Declaration><![CDATA[PROPERTY IsValid : BOOL]]></Declaration>
      <Get Name="Get" Id="{3d9b7d83-cc10-4311-a37d-43a8fa4c2d39}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[IsValid := _IsValid;]]></ST>
        </Implementation>
      </Get>
    </Property>
  </POU>
</TcPlcObject>
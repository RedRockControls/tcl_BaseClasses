<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="T_NotificationHandler" Id="{607f5e14-d01e-4493-979d-0fc6e8f214bb}" SpecialFunc="None">
    <Declaration><![CDATA[{attribute 'no_explicit_call' := 'do not call this POU directly'} 
FUNCTION_BLOCK T_NotificationHandler IMPLEMENTS I_NotificationHandler
VAR
    Args_LocalCopy                      : T_Stream(StreamLength := 4); // Local copy of notification arguments
    Args_PublicCopy                     : T_Stream(StreamLength := 4); // Public copy of notification arguments
    CriticalSection                     : FB_IecCriticalSection;
    NotificationCounter                 : T_Counter;
    QueueingEnabled                     : BOOL; // if required, set via variable initialisation in instance declaration
    RisingEdge_CriticalSectionInitError : T_RisingEdge; // Sometimes on online change we get CriticalSection.hrInit <> S_OK, so we need to log 1 error message (not every scan!)
END_VAR
VAR CONSTANT
    MAX_UNHANDLED_NOTIFICATIONS : DINT := 1000;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Folder Name="Methods" Id="{50523a27-f4f0-421d-b359-9106ca91093f}" />
    <Folder Name="Properties" Id="{bcb797de-c3f3-40e6-aa20-89bbc5f8f950}" />
    <Property Name="Args" Id="{677afeaa-0697-40f0-93b0-2ba305384c9c}" FolderPath="Properties\">
      <Declaration><![CDATA[PROPERTY Args : I_StreamReader
]]></Declaration>
      <Get Name="Get" Id="{3597fd34-9332-43bd-a3f4-c1cacf585b03}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[Args := Args_PublicCopy;
]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="IsRaised" Id="{e8102458-838e-441a-8b86-1d3da0b59390}" FolderPath="Methods\">
      <Declaration><![CDATA[METHOD IsRaised : BOOL
VAR
    ByteCount : UDINT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF CriticalSection.hrInit = S_OK THEN
	RisingEdge_CriticalSectionInitError.Test(FALSE);
    IF CriticalSection.Enter() THEN           // will block while receiving a notification
        IF NotificationCounter.Value > 0 THEN // at least one unhandled notification to be handled...
            IsRaised := TRUE;

            // get the length of the notification args (this is stored before the args themselves)
            ByteCount := Args_LocalCopy.Read_UDINT();

            // Copy the args for this notification to the public copy of the args, which can be accessed externally...
            Args_PublicCopy.Clear();
            Args_PublicCopy.AppendBytesFromStream(Args_LocalCopy,
                                                  ByteCount);

            NotificationCounter.Dec(); // to keep track of how many notifications remain to be handled

            IF NotificationQueueingEnabled AND NotificationCounter.Value > 0 THEN // more args to be handled (notification raised multiple times since last handled)...
                // advance the read pointer to the args belonging to the next notification (if any)                                      
                Args_LocalCopy.SetReadPosition(Args_LocalCopy.ReadPosition + ByteCount);
            ELSE // clear any unhandled notifications that remain..
				NotificationCounter.Reset();
                Args_LocalCopy.Clear();
            END_IF
        END_IF

        CriticalSection.Leave();
    END_IF
ELSE
	IF RisingEdge_CriticalSectionInitError.Test(TRUE) THEN // send error message only once!
    	F_LogError(Source := 'T_NotificationHandler', Message := 'FB_IEC_CriticalSection not initialised!');
	END_IF
END_IF
]]></ST>
      </Implementation>
    </Method>
    <Property Name="NotificationCount" Id="{75289af6-a460-4022-ac06-0483ce39413a}" FolderPath="Properties\">
      <Declaration><![CDATA[PROPERTY NotificationCount : DINT
]]></Declaration>
      <Get Name="Get" Id="{80a90d77-9dc4-4e7c-a8ec-f0f39e5d20cc}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[NotificationCount := NotificationCounter.Value;
]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="NotificationQueueingEnabled" Id="{a5314985-f357-4fe9-a599-bc37bf9428ff}" FolderPath="Properties\">
      <Declaration><![CDATA[PROPERTY NotificationQueueingEnabled : BOOL// Allows notifications to be raised multiple times before being handled sequentially. Make sure all notifications are handled!]]></Declaration>
      <Get Name="Get" Id="{1b6498ce-791f-4589-943b-9a1edc56d6b6}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[NotificationQueueingEnabled := QueueingEnabled;]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{3bfda8f6-68ff-4cb0-9193-8ace86f621f9}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[QueueingEnabled := NotificationQueueingEnabled;]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Method Name="RaiseNotification" Id="{8767452b-6194-4156-b4a1-080cf2d33e36}" FolderPath="Methods\">
      <Declaration><![CDATA[METHOD RaiseNotification
VAR_INPUT
    NotificationArgs : I_StreamReader;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF NotificationCounter.Value > MAX_UNHANDLED_NOTIFICATIONS THEN
    // Not much point raising another if they are not being handled...
    RETURN;
END_IF

IF CriticalSection.Enter() THEN
    IF NotificationArgs.WritePosition > 0 THEN // has event arguments..

        // Notification args are stored in a local copy using a stream
        // If the notification is raised again before being handled, the newer notification args are just added to the stream
        // The size of the args is stored in the stream before the args themselves so they
        // can be retrieved seperately when the notifications are handled    

        Args_LocalCopy.Add_UDINT(NotificationArgs.WritePosition); // length of args is stored first
        Args_LocalCopy.AppendBytesFromStream(StreamToAppend        := NotificationArgs,
                                             NumberOfBytesToAppend := NotificationArgs.WritePosition); // followed by args themselves
    END_IF

    NotificationCounter.Inc(); // keep track of how many times the notification has been raised, so we can handle each notification seperately
    CriticalSection.Leave();
END_IF
]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>
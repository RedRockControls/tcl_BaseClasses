<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="T_Execution" Id="{b17395d1-e10b-079c-263b-2eb9c4f6194b}" SpecialFunc="None">
    <Declaration><![CDATA[(*
:Class for handling communications between a client requesting a service 
:and a server providing the service
*)
//{attribute 'reflection'}
FUNCTION_BLOCK T_Execution EXTENDS T_Object IMPLEMENTS I_Execution, I_ExecutionResult
VAR
    _State    : T_ExecutionState;
    _Done     : BOOL;
    _Error    : BOOL;
    _Aborted  : BOOL;
    _ErrorMsg : T_MaxString;

//    {attribute 'instance-path'}
//    {attribute 'no_init'}
//    Name     : T_MaxString; // Automatically initialised with the full name of the instance
//    Project  : T_MaxString;
//    Solution : T_MaxString;

//    _Logger : I_Logger;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Folder Name="Methods" Id="{e45bf685-06c9-4e29-a8a9-cbf0453f59ad}" />
    <Folder Name="Properties" Id="{a48b7191-6aa5-4ac4-bdc5-b99d3da36639}" />
    <Method Name="Abort" Id="{f3b9b616-ecb6-448b-9a68-cf8864d1ed1d}" FolderPath="Methods\">
      <Declaration><![CDATA[METHOD Abort
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// Aborting must be handled by the client class - cleanup and set Ready state
IF Starting OR Busy THEN // avoid going back into aborting if execution has already been aborted
    _State := T_ExecutionState.Aborting;
END_IF
]]></ST>
      </Implementation>
    </Method>
    <Property Name="Aborted" Id="{47f18dce-47db-4b5b-a019-8668343f98f9}" FolderPath="Properties\">
      <Declaration><![CDATA[PROPERTY Aborted : BOOL
]]></Declaration>
      <Get Name="Get" Id="{f0f7563d-0a03-015d-3c7f-c1748808105b}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[Aborted := _Aborted;
]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="Aborting" Id="{f8431846-1954-03c8-30df-5a7e741c3ebe}" FolderPath="Properties\">
      <Declaration><![CDATA[PROPERTY Aborting : BOOL
]]></Declaration>
      <Get Name="Get" Id="{eb3b9983-c850-041a-1155-83f5216a49d2}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[Aborting := _State = T_ExecutionState.Aborting;
]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="Busy" Id="{03e849ec-ee28-0870-1ae9-eeb1ed24f4bc}" FolderPath="Properties\">
      <Declaration><![CDATA[PROPERTY Busy : BOOL
]]></Declaration>
      <Get Name="Get" Id="{945a4888-d71c-0d67-2d11-1ee4fe1836ec}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[Busy := _State = T_ExecutionState.Busy;
]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="Clear" Id="{e820ac7a-e3e5-421e-9394-79fc023e1ef0}" FolderPath="Methods\">
      <Declaration><![CDATA[// Clears the results flags provided State = Ready
METHOD Clear
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF _State = T_ExecutionState.Ready THEN
    _Done     := FALSE;
    _Aborted  := FALSE;
    _Error    := FALSE;
    _ErrorMsg := '';
ELSE
    IF _Logger <> 0 THEN
        _Logger.LogError(Source := Name, Message := 'Clear requested while not ready');
    END_IF
END_IF
]]></ST>
      </Implementation>
    </Method>
    <Property Name="Done" Id="{b9177cfb-6140-0c22-2370-60610db97e0d}" FolderPath="Properties\">
      <Declaration><![CDATA[PROPERTY Done : BOOL
]]></Declaration>
      <Get Name="Get" Id="{bc67d8cf-9e35-059a-2bc9-46701e812750}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[Done := _Done;
]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="Error" Id="{4a58af1f-20ba-01b9-3bbb-3123d27f16d2}" FolderPath="Properties\">
      <Declaration><![CDATA[PROPERTY Error : BOOL
]]></Declaration>
      <Get Name="Get" Id="{1bbb2e91-5896-0439-3898-15f12447c831}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[Error := _Error;
]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="ErrorMsg" Id="{03b333cf-212f-4b26-bcfc-f54366a3390d}" FolderPath="Properties\">
      <Declaration><![CDATA[PROPERTY ErrorMsg : T_MaxString
]]></Declaration>
      <Get Name="Get" Id="{87c8799e-98ff-4462-b8ed-e28804a16aed}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[ErrorMsg := _ErrorMsg;
]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="Logger" Id="{aa3a07cc-d6f4-4f98-8b7b-3359c2af12a3}" FolderPath="Properties\">
      <Declaration><![CDATA[PROPERTY Logger : I_Logger]]></Declaration>
      <Get Name="Get" Id="{c3c457a0-461c-49bf-ac68-8e6be3bd6e90}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[Logger := _Logger;]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{04d4611b-bd6f-40b2-afe9-0de5449d6d5f}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[_Logger := Logger;]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Property Name="Name" Id="{4a0e8d76-e64a-42c8-826b-cacfd21b0049}" FolderPath="Properties\">
      <Declaration><![CDATA[PROPERTY Name : T_MaxString]]></Declaration>
      <Get Name="Get" Id="{8e7f88bf-3e72-4dae-8eed-46c3c9025668}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[Name := SUPER^._Name;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="Ready" Id="{2af7d30b-7188-0edf-32b7-9305dcd7f6c3}" FolderPath="Properties\">
      <Declaration><![CDATA[PROPERTY Ready : BOOL
]]></Declaration>
      <Get Name="Get" Id="{07819190-be5b-06a7-0f77-77e004f7eaea}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[Ready := _State = T_ExecutionState.Ready;
]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="SetAborted" Id="{3457d55d-8917-427f-b4b1-3d8dae8fe5f2}" FolderPath="Methods\">
      <Declaration><![CDATA[METHOD SetAborted 
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF _State <> T_ExecutionState.Ready THEN
    _Done     := FALSE;
    _Aborted  := TRUE;
    _Error    := FALSE;
    _ErrorMsg := 'Execution aborted';
    _State := T_ExecutionState.Ready;
	
    IF _Logger <> 0 THEN
        _Logger.LogWarning(Source := Name, Message := _ErrorMsg);
    END_IF
END_IF
]]></ST>
      </Implementation>
    </Method>
    <Method Name="SetBusy" Id="{a5a7c695-c8c2-0fa3-058b-7078b33d95e5}" FolderPath="Methods\">
      <Declaration><![CDATA[METHOD SetBusy
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF _State = T_ExecutionState.Starting THEN
    _State := T_ExecutionState.Busy;
END_IF
]]></ST>
      </Implementation>
    </Method>
    <Method Name="SetDone" Id="{7437ab2d-de97-0db9-2d0a-b86eae15da44}" FolderPath="Methods\">
      <Declaration><![CDATA[METHOD SetDone
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF _State = T_ExecutionState.Starting OR _State = T_ExecutionState.Busy THEN
    _Error    := FALSE;
    _ErrorMsg := '';
    _Aborted  := FALSE;
    _Done     := TRUE;
    _State    := T_ExecutionState.Ready;
END_IF
]]></ST>
      </Implementation>
    </Method>
    <Method Name="SetError" Id="{f1633771-a524-4ccc-be65-99229396429e}" FolderPath="Methods\">
      <Declaration><![CDATA[METHOD SetError
VAR_INPUT
    ErrorMsg : T_MaxString;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF NOT _Error THEN
    _Error    := TRUE; // to ignore subsequent errors in an execution sequence
    _Aborted  := FALSE;
    _Done     := FALSE;
    _ErrorMsg := ErrorMsg;
    _State    := T_ExecutionState.Ready;

    IF _Logger <> 0 THEN
        _Logger.LogError(Source := Name, Message := _ErrorMsg);
    END_IF

END_IF
]]></ST>
      </Implementation>
    </Method>
    <Method Name="Start" Id="{def3bafe-9648-0b74-364e-7150751f5a3a}" FolderPath="Methods\">
      <Declaration><![CDATA[METHOD Start : I_ExecutionResult
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF _State = T_ExecutionState.Ready THEN
    _Done     := FALSE;
    _Aborted  := FALSE;
    _Error    := FALSE;
    _ErrorMsg := '';
    _State := T_ExecutionState.Starting;
	
ELSIF _State = T_ExecutionState.Busy THEN
    SetError('Start requested while already busy');
	
ELSIF _State = T_ExecutionState.Starting THEN
    SetError('Start requested while already starting');
	
ELSIF _State = T_ExecutionState.Aborting THEN
    SetError('Start requested while aborting');
	
ELSE
    SetError('Start requested while not ready');
END_IF

Start := THIS^;
]]></ST>
      </Implementation>
    </Method>
    <Property Name="Starting" Id="{74926035-220d-03e3-3b86-d5067a70c227}" FolderPath="Properties\">
      <Declaration><![CDATA[PROPERTY Starting : BOOL
]]></Declaration>
      <Get Name="Get" Id="{b249388e-1ee2-027a-08c8-85eee11e571e}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[Starting := _State = T_ExecutionState.Starting;
]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="State" Id="{34686f20-e5ce-076a-20fe-0604181ce5eb}" FolderPath="Properties\">
      <Declaration><![CDATA[PROPERTY State : T_ExecutionState
]]></Declaration>
      <Get Name="Get" Id="{643951a8-dea2-0da6-338f-29e7e986b3be}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[State := _State;
]]></ST>
        </Implementation>
      </Get>
    </Property>
  </POU>
</TcPlcObject>
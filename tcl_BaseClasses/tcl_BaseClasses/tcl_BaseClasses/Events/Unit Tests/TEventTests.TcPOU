<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.3">
  <POU Name="TEventTests" Id="{f682236d-8b05-4c5b-a31e-67efccd5edb2}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK TEventTests EXTENDS TcUnit.FB_TestSuite
]]></Declaration>
    <Implementation>
      <ST><![CDATA[AddEventHandler_IncsNumberOfEventHandlers();
AddEventHandler_ChecksInterfaceSupported();
EventHandler_HandlesRaisedEvent();
AddEventHandler_FailsWhenListFull();]]></ST>
    </Implementation>
    <Method Name="AddEventHandler_ChecksInterfaceSupported" Id="{baa9025a-eff3-4773-ac53-bdca41e29d7b}">
      <Declaration><![CDATA[METHOD AddEventHandler_ChecksInterfaceSupported
VAR_INST
    //TestEvent : TTestEvent(MaxEventhandlers := 10);
    TestEvent : TTestEvent;
    TestEventHandler : TUnsupportedEventHandler;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST(TestName := 'AddEventHandler_ChecksInterfaceSupported');

TestEvent.ClearEventHandlers().AddEventHandler(TestEventHandler); // should trigger an error message

AssertEquals_DINT(
    Expected := 0,
    Actual   := TestEvent.EventHandlers.Count,
    Message  := 'Count Incd When Invalid Event Handler Added');
    


TEST_FINISHED();
    ]]></ST>
      </Implementation>
    </Method>
    <Method Name="AddEventHandler_FailsWhenListFull" Id="{8246ea62-1649-4a7f-b1c5-d25d9b56dfe2}">
      <Declaration><![CDATA[METHOD AddEventHandler_FailsWhenListFull
VAR_INST
    TestEvent : TTestEvent;
    TestEventHandler : TTestEventHandler;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST(TestName := 'AddEventHandler_FailsWhenListFull');

TestEvent
    .ClearEventHandlers()
    .AddEventHandler(TestEventHandler)
    .AddEventHandler(TestEventHandler)
    .AddEventHandler(TestEventHandler)
    .AddEventHandler(TestEventHandler)
    .AddEventHandler(TestEventHandler)  // handler list now full
    .AddEventHandler(TestEventHandler); // should trigger an error message
    
AssertEquals_DINT(
    Expected := 5,
    Actual   := TestEvent.EventHandlers.Count,
    Message  := 'Number Of Event Handlers was not correct');

TEST_FINISHED();
    ]]></ST>
      </Implementation>
    </Method>
    <Method Name="AddEventHandler_IncsNumberOfEventHandlers" Id="{6c4a9a47-8df0-4b40-8f9b-10e7db2fd0c6}">
      <Declaration><![CDATA[METHOD AddEventHandler_IncsNumberOfEventHandlers
VAR_INST
    TestEvent : TTestEvent;
    TestEventHandler : TTestEventHandler;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST(TestName := 'AddEventHandler_IncsNumberOfEventHandlers');

TestEvent
    .ClearEventHandlers()
    .AddEventHandler(TestEventHandler);
    
AssertEquals_DINT(
    Expected := 1,
    Actual   := TestEvent.EventHandlers.Count,
    Message  := 'Number Of Event Handlers was not incremented');
    

TEST_FINISHED();
    ]]></ST>
      </Implementation>
    </Method>
    <Method Name="EventHandler_HandlesRaisedEvent" Id="{c80cdc38-4bc8-4182-bd2c-5b4b992ff108}">
      <Declaration><![CDATA[METHOD EventHandler_HandlesRaisedEvent
VAR_INST
    TestEvent : TTestEvent;
    TestEventHandler1 : TTestEventHandler;
    TestEventHandler2 : TTestEventHandler;
    TestEventHandler3 : TTestEventHandler;
    TestEventHandler4 : TTestEventHandler;
    TestEventHandler5 : TTestEventHandler;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST(TestName := 'EventHandler_HandlesRaisedEvent');

TestEvent
    .ClearEventHandlers()
    .AddEventHandler(TestEventHandler1)
    .AddEventHandler(TestEventHandler2)
    .AddEventHandler(TestEventHandler3)
    .AddEventHandler(TestEventHandler4)
    .AddEventHandler(TestEventHandler5);
    
TestEvent.RaiseEx(21);

AssertEquals_BOOL(
    Expected := TRUE,
    Actual   := TestEventHandler1.EventWasRaised,
    Message  := 'Event was not handled');

AssertEquals_BOOL(
    Expected := TRUE,
    Actual   := TestEventHandler2.EventWasRaised,
    Message  := 'Event was not handled');

AssertEquals_BOOL(
    Expected := TRUE,
    Actual   := TestEventHandler3.EventWasRaised,
    Message  := 'Event was not handled');

AssertEquals_BOOL(
    Expected := TRUE,
    Actual   := TestEventHandler4.EventWasRaised,
    Message  := 'Event was not handled');

AssertEquals_BOOL(
    Expected := TRUE,
    Actual   := TestEventHandler5.EventWasRaised,
    Message  := 'Event was not handled');

    
AssertEquals_UDINT(
    Expected := 21,
    Actual   := TestEventHandler1._EventData,
    Message  := 'Event data was not set');
    
AssertEquals_UDINT(
    Expected := 21,
    Actual   := TestEventHandler2._EventData,
    Message  := 'Event data was not set');
    
AssertEquals_UDINT(
    Expected := 21,
    Actual   := TestEventHandler3._EventData,
    Message  := 'Event data was not set');
    
AssertEquals_UDINT(
    Expected := 21,
    Actual   := TestEventHandler4._EventData,
    Message  := 'Event data was not set');
    
AssertEquals_UDINT(
    Expected := 21,
    Actual   := TestEventHandler5._EventData,
    Message  := 'Event data was not set');
    
TEST_FINISHED();
    ]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>